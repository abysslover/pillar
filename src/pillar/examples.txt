1. Encoding, Decoding test
	string seq = "ACGTACGTNACGTACGTACGT";
	Kmer kmer;
	kmer.set_k(15);
	kmer.encode(seq, 0);
	Kmer kmer2;
	kmer2.set_k(15);
	kmer2.encode(seq, 1);
	cout << (kmer < kmer2) << "\n";
	cout << kmer.decode() << "\n";
	cout << kmer.decode_rev() << "\n";
	kmer.left_shift(1);
	cout << kmer.decode() << "\n";
	cout << kmer.decode_rev() << "\n";
	kmer.push_back('T');
	cout << kmer.decode() << "\n";
	cout << kmer.decode_rev() << "\n";
	kmer.shift_and_push_back('C');
	cout << kmer.decode() << "\n";
	for(uint64_t b_id = 0; b_id < kmer.size(); ++b_id) {
		cout << kmer[b_id];
	}
	cout << "\n";
	cout << kmer.decode_rev() << "\n";
	for(uint64_t b_id = 0; b_id < kmer.size(); ++b_id) {
		cout << kmer(b_id);
	}
	cout << "\n";
	
	
	string seq = "ACGTACGTNACGTACGTACGT";
	SmallKmer kmer;
	kmer.set_k(15);
	kmer.encode(seq, 0);
	SmallKmer kmer2;
	kmer2.set_k(15);
	kmer2.encode(seq, 1);
	cout << (kmer < kmer2) << "\n";
	cout << kmer.decode() << "\n";
	cout << kmer.decode_rev() << "\n";
	kmer.left_shift(1);
	cout << kmer.decode() << "\n";
	cout << kmer.decode_rev() << "\n";
	kmer.push_back('T');
	cout << kmer.decode() << "\n";
	cout << kmer.decode_rev() << "\n\n";
	kmer.shift_and_push_back('C');
	cout << kmer.decode() << "\n";
	for(uint64_t b_id = 0; b_id < kmer.size(); ++b_id) {
		cout << kmer[b_id];
	}
	cout << "\n\n";
	cout << kmer.decode_rev() << "\n";
	for(uint64_t b_id = 0; b_id < kmer.size(); ++b_id) {
		cout << kmer(b_id);
	}
	cout << "\n";
	
2. Split test
	string a_read("TGGTCGTTGAAGATGAGGTCAGATCATAACGTTACTTGAGGTACGCAGATTCTGGTTTTTGGAAAAGCTTTAAATTGAGTTTTGATAATTTAGGCCTCCCGACTGAAGATTTTGTTGGTGGTTACGCCTGCCTGATAGAAGAATGGCATTGATAACATTAATACAATGAGAGAGTTCTTCTCAAGGTTTTAACTAAACACTTCAGATTTTTATTTGTGGATTTGACTGAATTTTGTAAGGATTGATTATTGGCTTGATTTGGGAATTAGGTTATTAGTTACCCTCACCTACGTTCTGACACCCGTTTTTTTGTCCCGGGACGCTGAGTAGGCCCTTGATCATGACTGGTTTCCGTGTGGGTTGAACCCATGGTAAACATTTTGGACTTTCTTATGAGTTGGGAGTTTGTGGTTCTTTATTTTGGGTTTTAGGTTTACATGGGTGTGGGGGGGATGGGGAATCTTTAGGGATTCCACCGTAGCTGGGTACCGAGGGAGACCGATATACTTCAGGCCGGAAGAAGTGAAGCCTGGCGATTATCACTTGTGGTGCCTTTGCCCTAGGTCGCAAGGATGTCAATCAGCATGTGAGTTTGTAAGCGGAAACCGTTTGGCATTATAGAAACAGTAGGTGTGTGTGTGGGTGACGTCCATACAAAGACCGTATTGTGTGTTGATATGGATACATTGCCAGATTGTCATTAACTCTTGAGCATGTTCGGGTGGGAGACCCTTGGGTGGGGATTCCCTTTGCGTTAGCGTGCGTGTCTCTCTGATAAAGATCTACTGAAATGACCGTATTGTTCGAGTTTGTGCTCCTTTTTCGAGAAAAAGAACCCGAATCTCTGTTTCTGTTGTGGCGGCGGTTTGGGTGTTGGCTTGGTTTGTGCGTTCAGGTCTCAAGAGAAGTGGTGGAGTGAGGTGTGTGGTCAGAAAAAAGGGTGCATTGATCGGGAGGAGTGGGCTTGGAGGTTCACGGGGGAGGCCACCCGGGGGGGGAGTGAAAGGTGTCGCAGCATGGGAGGATAAGGTAGAGTTTTTTTTGTTCAGTCCGTAGGACTTATGATTCAAGATGCTGAATTCTAGAAAATTGATTTACTGCGGAGAGGAATCAACATGCGGTTCGCGAGCTCGGTGGAAACGGAACTCAGGCGCGGGCGCCCAACGCTCATAAACACAATGAGGTCGTTACTAAAACAATTGAAACTAATGGGTAGTTCGTGTGAAGATATGTTTTCTTTTTCGTTTTCTTTATTTTGGCGTTTGATGTACCGATTCAGCATCGTGCTTTCAATTCTATGCCGCAAGAAAGATGAAAGGTAGGCTGTAGTTTGATGTGCCAAACAACCATCAGACAATGATATTTTTACATATGGAATAAAACTTTTTTTGGGTTTGATACTGCTGTTGAAGAAGCTCAACGAGGCAGAATTAACTCTGCTTACAATATGAGGTAACTATTCAGTACTCTCAAGGTTAGATATTCCTAACATGTACTCTTTTGGCTTTAAGTACTTACCATTGCTGAGGTGGGCCTTCTGTATTAATGCAAATAGTGCGTGTCGCAATGCATTGGGAAGATTGTAAAAACTGATGGGTCGTACAGTAGTGTCATTGCTTATGCCAGCCTCTCTAGCCAGTGGACAAGTCGACATCGGTTGGATTCCGTAGAGGTACTTCTTGGTTATATTTCAAATTCCAAAAACAGATTGATTGAGCTCGCTCGAAGAGATCCGATGCACTAGGTTCCTTCAATTTCATGGGCCTAAGGGTGTAGTGCAAGACAGGTTGTAGGTACCATTAGTGGAAACAAAAGGGCTACTGCTGTGATCTGTGGTAGCAGAAGGAAGCTGGACGGGATAACAGAATTCACACCCCAGAATTAAGGGAGCTATTTCTCTACTTGAGTTTTTTGTCAACGAAGTTATATATTTGTTTACATTTTCTTGGCAGTTGTGTCCGAAGAATTTCTGAAGAAACCAATGCCAAAGATGCATCTGGAAGACGCCGACGTGGTGATTTTCGGTGTGTATATTTACAACAAGAGGTTAGATATAAGCACATTTGGGTGAGACTTGAGATATGACATAAGTGTAAACTTGTTGCCTTCTTAATGAGTTGACAAATCTATCTTCTTCTTGTTTTGTCGAATAGACTAAGAAGGATTTCAAAGAAATATACTATTAACCAATAGATGTGAAGTATAGATTGACCAACCACATGATTCCAGCGCTGTAAACGTGCAAATGCTCGGAGGGTAGCCCATGCACCGTTCTTGGACGGCCCCAAAAAAAAAAAAAAACGCGGGGGGCCACCCCTGTAAGTCACTTCACAACACAACATCTCTTCAGAGTCCGCTCTCAGCACAATTTAGATAAGAATGCTTAGAAGTTAGAAACTAAAAAATGTTCCCGATGTTGTTTTTAAGGTCCGATGAATTTGTTTAAGCATGATGATCTTATAAAAACAGGTTCATGGTGCTTTGCTGGTACATTGGAATCACGGTAGGCATAATCAACAACATCCTATGCAATATTTGCAATCCTGAGGGTAATTGCTATCCAAATCAGTGGATCCTAATAGTCAGAATGTGCATCGTTGCTTGACGACATCACGGAGCCAACCCGAATTGATAAATCATAAAAAGATAGTTTATTAGTACCATACACGAAACAAACTGATGATAGAAAATAAGGGCCTGTGAAATAGTTAGACAGTAGCATTTCAGGGGTCCTTGTTAATGATTATCAATCATGTATTTATTTAAATTTTAGTAGGAAAGTCATTGAAGTGAGGGATCTTTTTTTTTTGTGTGTGTGAAAAGAGGGGAGTGTACTTTATCCATGGTACAACTTTGGTAGAGTTAAAATGTGGGCCTTGGAGCCACTTTGTTCTGTTAATTGTATGTGGGTTTGTTGGTCCTTTTTGTTTCCCCCCCACCCCCCCCCCCCCCCTCCCCCCGTCCTTCAACTTTCTCTCCCTTAATGCGTCTCTGTTCACCCGCCTCTCGTACCGCCATTCAAACTAACTAGGAAAAGTGCATAGAATCTAAAAATGACGATCCAGATCATCCGAAAACGGTTTTGGTTTACTTGGCCATCTTCAATGGTGAGAGCCTCCCCTGGACTCTCTAACATGTATTTAATAGTATTTTTTTTGTCAATTATTAAAGAGAGCATTAAATGTTTTGTTTTTTGTTTAAGTGTTAGAGAGTCGCAATGGGTAAAAATCTCTTCTAGTTGGTAGGTGCTCTCTAAACTTTCATGTGGAAAGATTGACTTGGAATTACTCACATTGATCAAAATCAGCAAATTAAGCTCAGGAAACTTAGCTAAAACGGTTATTAGGAAAGAGATTCCCACAAGTGCAAATTTACTAGAAACAAATGACAGGCATTGAAATGTGGACAACAAAAAACTTTTTCGTCCTTTTGTTCGAGACATATATATGGCATTAAACATGCTACAATGAAGTATAAGCAGAAAACGGTGGTACAAAATTAGTGTTTTGTCAGTATTTTATGAAACAACCAAACGAACCCATCTCTAGGTGATTTTTCATAACGAAAATTATATCCAGAGGATCCACTTAGGACAGCTTATCAAAAGAAACGATGGAGCATTGAAGTGGGAACTATACTACCCCTAGGTCTCAATTA");
	string a_qual;
	SplitReader sr;
	sr.split_a_read(a_read, a_qual);
	sr.split_a_read_alt(a_read, a_qual);